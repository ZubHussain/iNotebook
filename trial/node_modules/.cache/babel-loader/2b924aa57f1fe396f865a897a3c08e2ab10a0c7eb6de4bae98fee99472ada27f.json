{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\john\\\\OneDrive\\\\Desktop\\\\Backend\\\\trial\\\\src\\\\contexts\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:8000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  //==========================================Get all Notes ==============================================================\n  const getNotes = async () => {\n    //API call\n    const response = await fetch(`${host}/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.setItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n\n  //==========================================Add a note ==============================================================\n  const addNote = async (title, description, tag) => {\n    //API call\n    const response = await fetch(`${host}/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.setItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n\n  //==========================================Delete a note ==============================================================\n  const deleteNote = async id => {\n    //API call\n    const response = await fetch(`${host}/notes/deletenotes/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.setItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n    const newNote = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNote);\n  };\n\n  //==========================================Edit a note ==============================================================\n  const editNote = async (id, title, description, tag) => {\n    //API call\n    const response = await fetch(`${host}/notes/updatenotes/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.setItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","setItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNote","filter","_id","editNote","console","log","newNotes","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/john/OneDrive/Desktop/Backend/trial/src/contexts/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:8000\";\r\n\r\n  const notesInitial = [];\r\n\r\n  const [notes, setNotes] = useState(notesInitial);\r\n\r\n  //==========================================Get all Notes ==============================================================\r\n  const getNotes = async () => {\r\n    //API call\r\n    const response = await fetch(`${host}/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.setItem('token')\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    setNotes(json);\r\n  };\r\n\r\n  //==========================================Add a note ==============================================================\r\n  const addNote = async (title, description, tag) => {\r\n    //API call\r\n    const response = await fetch(`${host}/notes/addnotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.setItem('token')\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    const note = await response.json();\r\n    setNotes(notes.concat(note));\r\n\r\n  };\r\n\r\n  //==========================================Delete a note ==============================================================\r\n  const deleteNote = async (id) => {\r\n    //API call\r\n    const response = await fetch(`${host}/notes/deletenotes/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.setItem('token')\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    setNotes(json);\r\n\r\n    const newNote = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNote);\r\n  };\r\n\r\n  //==========================================Edit a note ==============================================================\r\n  const editNote = async (id, title, description, tag) => {\r\n    //API call\r\n    const response = await fetch(`${host}/notes/updatenotes/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.setItem('token')\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    const json = await response.json();\r\n    console.log(json);\r\n\r\n    let newNotes = JSON.parse(JSON.stringify(notes))\r\n    for (let index = 0; index < newNotes.length; index++) {\r\n      const element = newNotes[index];\r\n      if (element._id === id) {\r\n        element.title = title;\r\n        element.description = description;\r\n        element.tag = tag;\r\n        break;\r\n      }\r\n    }\r\n    setNotes(newNotes)\r\n  };\r\n\r\n  return (\r\n    <NoteContext.Provider\r\n      value={{ notes, addNote, deleteNote, editNote, getNotes }}\r\n    >\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}